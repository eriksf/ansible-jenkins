---
# Enables the Jenkins CLI and configures the 'admin' account so that it can be
# used to connect to the CLI.

- name: Generate SSH Keys for jenkins Service Account
  user:
    name: jenkins
    generate_ssh_key: yes
  become: true

- name: Read SSH Public Key for jenkins Service Account
  shell: "cat {{ jenkins_home_default }}/.ssh/id_rsa.pub"
  become: true
  changed_when: false
  register: jenkins_user_ssh_public_file

- name: Parse SSH Public Key for jenkins Service Account
  set_fact: jenkins_user_ssh_public_key="{{ jenkins_user_ssh_public_file.stdout_lines[0] }}"

- name: Jenkins Init Script - Enable sshd
  template:
    src: configureSshd.groovy.j2
    dest: "{{ jenkins_home }}/init.groovy.d/configureSshd.groovy"
    owner: jenkins
    group: jenkins
    mode: 0744
  become: true
  notify:
    - "Restart Service 'jenkins'"

# Fire any pending restart handlers now, as we need `configureSshd.groovy` to
# have run, or else the CLI may not be enabled.
- meta: flush_handlers

# At this point (once the service is restarted), the CLI itself should be usable
# by the 'jenkins' system user (and its SSH keys).

- name: Create Jenkins CLI Directory
  file:
    path: /opt/jenkins
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755
  become: true

# The CLI comes "baked in" to the Jenkins WAR. Easiest way to extract it is 
# just to download it.
- name: Get Jenkins CLI
  get_url:
    url: "http://localhost:{{ jenkins_port }}{{ jenkins_context_path | default('') }}/jnlpJars/jenkins-cli.jar"
    dest: /opt/jenkins/jenkins-cli.jar
    owner: jenkins
    group: jenkins
    mode: 0444
  environment:
    no_proxy: localhost
  become: true

- name: Read Jenkins Config File
  slurp:
    src: "{{ jenkins_home }}/config.xml"
  become: true
  changed_when: false
  register: slurp_jenkins_config

- name: Determine Active Security Realm
  set_fact:
    # Yes, I'm parsing XML with a regex, and yes that's bad. But it's almost
    # certainly "good enough" in this instance, so.
    jenkins_active_security_realm: "{{ slurp_jenkins_config.content | b64decode | regex_replace('\n', '') | regex_replace('.*<securityRealm class=\"([^\"]+)\".*', '\\1') }}"

- name: Determine Active Admin User
  set_fact:
    jenkins_active_admin_username: "{{ item | regex_replace('^[^:]+:', '') }}"
  when: "item | match('^' + jenkins_active_security_realm + ':.*$')"
  with_items: "{{ jenkins_admin_users }}"

- name: Create Fact for Jenkins CLI Command
  set_fact:
    jenkins_cli_command: "java -jar /opt/jenkins/jenkins-cli.jar -s http://localhost:{{ jenkins_port }}{{ jenkins_context_path | default('') }}{{ '' if jenkins_active_security_realm == 'hudson.security.SecurityRealm$None' else ' -ssh -user ' + jenkins_active_admin_username }}"

- name: Verify CLI
  shell: "{{ jenkins_cli_command }} who-am-i"
  register: cli_whoami
  become: true
  become_user: jenkins
  changed_when: false
